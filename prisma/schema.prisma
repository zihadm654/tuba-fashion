// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)

  accounts Account[]
  sessions Session[]
  Order    Order[]
  Product  Product[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Product {
  id                 String        @id @default(uuid())
  userId             String
  title              String
  description        String
  status             ProductStatus
  price              Int
  discountPercentage Float? // discount rate in percentage (e.g. 20 means 20% off)
  discountStart      DateTime? // optional start date for discount
  discountEnd        DateTime? // optional end date for discount
  images             String[]
  category           Category
  isFeatured         Boolean       @default(false)
  quantity           Int           @default(0)
  color              String[]
  size               String[]
  febric             String?
  createdAt          DateTime      @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Order Order[]

  @@map(name: "products")
}

model Banner {
  id          String @id @default(uuid())
  title       String
  imageString String

  createdAt DateTime @default(now())

  @@map(name: "banners")
}

model Order {
  id     String @id @default(uuid())
  status String @default("pending")
  amount Int

  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "orders")
}

enum ProductStatus {
  draft
  published
  archived
}

enum Category {
  men
  women
  kids
}
