// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model Review {
  id         String   @id @default(cuid())
  rating     Int      @db.SmallInt
  comment    String?
  userId     String
  productId  String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@map(name: "reviews")
}

model Product {
  id                 String        @id @default(uuid())
  userId             String
  title              String
  description        String
  status             ProductStatus
  price              Int
  discountPercentage Float? // discount rate in percentage (e.g. 20 means 20% off)
  discountStart      DateTime? // optional start date for discount
  discountEnd        DateTime? // optional end date for discount
  images             String[]
  category           Category
  isFeatured         Boolean       @default(false)
  quantity           Int           @default(0)
  color              String[]
  size               String[]
  tags               String[]
  febric             String?
  createdAt          DateTime      @default(now())

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews   Review[]
  Order     Order[]
  OrderItem OrderItem[]

  @@map(name: "products")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)

  accounts   Account[]
  sessions   Session[]
  Order      Order[]
  Product    Product[]
  reviews    Review[]
  PaymentLog PaymentLog[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Banner {
  id          String @id @default(uuid())
  title       String
  imageString String

  createdAt DateTime @default(now())

  @@map(name: "banners")
}

model Order {
  id              String      @id @default(uuid())
  status          OrderStatus @default(PENDING)
  amount          Int
  shippingAddress Json
  paymentId       String?     @unique
  orderItems      OrderItem[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@index([userId])
  @@map(name: "orders")
}

model OrderItem {
  id       String  @id @default(uuid())
  quantity Int
  price    Int
  color    String?
  size     String?

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([orderId])
  @@index([productId])
  @@map(name: "order_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ProductStatus {
  draft
  published
  archived
}

enum Category {
  men
  women
  kids
}

// Add these models to your schema

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
}

model PaymentLog {
  id              String        @id @default(cuid())
  userId          String
  transactionId   String        @unique
  amount          Float
  status          PaymentStatus @default(PENDING)
  currency        String        @default("BDT")
  paymentMethod   String?
  customerName    String
  customerEmail   String
  customerPhone   String
  shippingAddress Json
  items           Json
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([transactionId])
}
