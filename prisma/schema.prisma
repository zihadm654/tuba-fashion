// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  OTP                   String?
  emailUnsubscribeToken String? @unique @default(cuid())
  referralCode          String? @unique

  isBanned          Boolean @default(false)
  isEmailVerified   Boolean @default(false)
  isPhoneVerified   Boolean @default(false)
  isEmailSubscribed Boolean @default(false)
  isPhoneSubscribed Boolean @default(false)

  cart     Cart?
  wishlist Product[] @relation("Wishlist")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  role      UserRole @default(USER)

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  addresses     Address[]
  products      Product[]
  reviews       Review[]
  payments      Payment[]
  notifications Notification[]
  Error         Error[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Cart {
  user   User       @relation(fields: [userId], references: [id])
  userId String     @id
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  cart      Cart    @relation(fields: [cartId], references: [userId])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  count     Int

  @@unique([cartId, productId], name: "UniqueCartItem")
}

model Brand {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?
  logo        String?

  products Product[]
}

enum ProductStatus {
  draft
  published
  archived
}

model Product {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String
  images      String[]
  tags        String[]
  metdata     Json?

  price         Float     @default(100)
  discount      Float     @default(0)
  discountStart DateTime? // optional start date for discount
  discountEnd   DateTime? // optional end date for discount
  stock         Int       @default(0)

  isPhysical  Boolean       @default(true)
  isAvailable Boolean       @default(false)
  isFeatured  Boolean       @default(false)
  status      ProductStatus

  color  String[]
  size   String[]
  febric String?

  orders    OrderItem[]
  cartItems CartItem[]
  wishlists User[]      @relation("Wishlist")
  reviews   Review[]
  brand     Brand       @relation(fields: [brandId], references: [id])
  brandId   String

  categories Category[]

  createdAt DateTime @default(now())
  update    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // order   Order?  @relation(fields: [orderId], references: [id])
  // orderId String?

  @@index([brandId])
  @@map(name: "products")
}

model Category {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?

  products Product[]
  banners  Banner[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id      String  @id @default(cuid())
  rating  Int     @db.SmallInt
  comment String?

  userId    String
  productId String

  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, userId], name: "uniqueProductReview")
  @@index([userId])
  @@index([productId])
  @@map(name: "reviews")
}

model Order {
  id     String      @id @default(cuid())
  number Int         @unique @default(autoincrement())
  status OrderStatus

  // Add price breakdown
  total    Float @default(100)
  shipping Float @default(100)
  payable  Float @default(100)
  tax      Float @default(100)
  discount Float @default(0)

  isPaid      Boolean @default(false)
  isCompleted Boolean @default(false)

  payments   Payment[]
  orderItems OrderItem[]
  refund     Refund?

  // Make userId required and improve relation
  discountCode   DiscountCode? @relation(fields: [discountCodeId], references: [id])
  discountCodeId String?
  address        Address?      @relation(fields: [addressId], references: [id])
  addressId      String?
  user           User          @relation(fields: [userId], references: [id])
  userId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([addressId])
  @@index([discountCodeId])
  @@map(name: "orders")
}

model OrderItem {
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  count     Int
  price     Float
  discount  Float

  @@unique([orderId, productId], name: "UniqueOrderItem")
}

enum OrderStatus {
  Processing
  Shipped
  Delivered
  ReturnProcessing
  ReturnCompleted
  Cancelled
  RefundProcessing
  RefundCompleted
  Denied
}

model Address {
  id         String @id @default(cuid())
  country    String @default("IRI")
  address    String
  city       String
  phone      String
  postalCode String

  user   User    @relation(fields: [userId], references: [id])
  userId String
  orders Order[]

  createdAt DateTime @default(now())

  @@index([userId])
}

model Notification {
  id      String  @id @default(cuid())
  content String
  isRead  Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model DiscountCode {
  id                String   @id @default(cuid())
  code              String   @unique
  stock             Int      @default(1)
  description       String?
  percent           Int
  maxDiscountAmount Float    @default(1)
  startDate         DateTime
  endDate           DateTime

  order Order[]

  createdAt DateTime @default(now())
}

model Refund {
  id     String @id @default(cuid())
  amount Float
  reason String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

model Payment {
  id     String        @id @default(cuid())
  number Int           @unique @default(autoincrement())
  status PaymentStatus @default(PENDING)

  refId    String  @unique
  cardPan  String?
  cardHash String?
  fee      Float?

  isSuccessful Boolean @default(false)
  payable      Float

  provider   PaymentProvider @relation(fields: [providerId], references: [id])
  providerId String
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  order      Order           @relation(fields: [orderId], references: [id])
  orderId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([providerId])
  @@index([orderId])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
}

model PaymentProvider {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?
  websiteUrl  String?
  isActive    Boolean @default(false)

  orders Payment[]
}

model Banner {
  id          String @id @default(uuid())
  title       String
  imageString String

  createdAt  DateTime  @default(now())
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@map(name: "banners")
}

model Error {
  id String @id @default(cuid())

  error String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())

  @@index([userId])
}
